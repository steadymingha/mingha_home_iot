// #include <IRremote.h>

// // Define the IR LED and Receiver pins
// const int irLedPin = 3;
// const int irRecvPin = 11;

// // The rawData array you provided
// unsigned int rawData[200] = {205, 66, 65535, 10, 25, 23, 9, 8, 2560, 18, 2, 288, 24, 375, 14, 30, 47288, 184, 32, 0, 2304, 256, 47288, 47288, 47288, 47288, 1720, 775, 47288, 9, 0, 0, 65280, 3, 771, 204, 0, 0, 0, 0, 65328, 184, 7, 184, 47288, 184, 64952, 33288, 0, 47288, 0, 44461, 0, 184, 0, 1, 1028, 47288, 47288, 47288, 0, 135, 0, 0, 769, 0, 11, 0, 0, 0, 0, 2827, 47288, 47288, 47288, 47288, 47288, 2827, 47288, 47288, 47288, 47288, 47288, 2313, 47288, 47288, 47288, 47288, 514, 25675, 25700, 0, 63488, 65534, 0, 47288, 47106, 1542, 16, 0, 47288, 47288, 47288, 47288, 47288, 47288, 2313, 47288, 47288, 47288, 47288, 47288, 47288, 47288, 47288, 47288, 47288, 2313, 47288, 47288, 47288, 47288, 47288, 2313, 47288, 47288, 47288, 47288, 0, 0, 973, 813, 858, 1050, 907, 873, 893, 2573, 18688, 8274, 25938, 25955, 30313, 29285, 18720, 26990, 26996, 27745, 31337, 25701, 20992, 25445, 26981, 25974, 8292, 21065, 29472, 26473, 24942, 108, 24946, 17527, 29793, 23393, 23808, 8250, 11264, 32, 30035, 14957, 32, 1, 0, 49408, 25801, 8259, 0, 0, 51200, 51967, 140, 1024, 36909, 0, 0, 889, 511, 260, 0, 1000, 0, 0, 0, 197, 196, 192, 193, 194, 198, 1};

// // Create IR send and receive objects
// IRsend irsend;
// IRrecv irrecv(irRecvPin);
// decode_results results;

// void setup() {
//   Serial.begin(115200);
//   irsend.begin(irLedPin); // Initialize the IR sender
//   irrecv.enableIRIn(); // Start the receiver
// }

// void loop() {
//   // Send the IR signal multiple times for stability
//   Serial.println("Sending IR signal...");
//   for (int i = 0; i < 3; i++) {
//     irsend.sendRaw(rawData, 200, 38); // 38kHz is the standard frequency for most IR devices
//     delay(40); // Small delay between signals
//   }
//   delay(5000); // Wait 5 seconds before sending the signal again

//   // Check if an IR signal is received
//   if (irrecv.decode(&results)) {
//     Serial.println("Received IR signal:");
//     for (int i = 1; i < results.rawlen; i++) { // Skip the first value (header)
//       Serial.print(results.rawbuf[i] * USECPERTICK, DEC);
//       if (i < results.rawlen - 1) {
//         Serial.print(", ");
//       }
//     }
//     Serial.println();
//     irrecv.resume(); // Receive the next value
//   }
// }



// #include <IRremote.h>

// const int irReceiverPin = 3; // IR 수신기가 연결된 핀 (D3)
// IRrecv irrecv(irReceiverPin);
// decode_results results;

// void setup() {
//   Serial.begin(115200);        // 시리얼 통신 시작
//   irrecv.enableIRIn();       // IR 수신기 시작
//   Serial.println("IR Receiver Initialized"); // 초기 메시지 출력
// }

// void loop() {
//   if (irrecv.decode(&results)) {
//     Serial.println("Received IR signal");

//     // 수신된 RAW 데이터를 출력합니다.
//     Serial.print("rawData[");
//     Serial.print(results.rawlen);
//     Serial.print("]: ");

//     for (int i = 0; i < results.rawlen; i++) {
//       Serial.print(results.rawbuf[i], DEC);
//       if (i < results.rawlen - 1) {
//         Serial.print(", ");
//       }
//     }
//     Serial.println();

//     // 신호의 합을 출력합니다 (선택 사항)
//     unsigned long sum = 0;
//     for (int i = 1; i < results.rawlen; i++) {
//       sum += abs(results.rawbuf[i]);
//     }
//     Serial.print("Sum: ");
//     Serial.println(sum);

//     irrecv.resume(); // 다음 신호를 위해 수신기 재설정
//   }
// }







// const int irReceiverPin = 3; // IR 수신기가 연결된 핀 (D3)

// void setup() {
//   Serial.begin(115200);         // 시리얼 통신 시작
//   pinMode(irReceiverPin, INPUT); // IR 수신기 핀을 입력 모드로 설정
//   Serial.println("IR Receiver Ready"); // 초기 메시지 출력
// }

// void loop() {
//   unsigned long duration;
  
//   // 신호가 들어올 때까지 대기
//   while (digitalRead(irReceiverPin) == HIGH) {}

//   // 신호가 LOW로 전환되면 시간 측정 시작
//   duration = pulseIn(irReceiverPin, LOW);

//   if (duration > 0) {
//     Serial.print("Duration: ");
//     Serial.println(duration); // 펄스 길이를 시리얼 모니터에 출력
//   } else {
//     Serial.println("No signal"); // 신호가 없는 경우 메시지 출력
//   }

//   // 잠시 대기
//   delay(100);
// }







/* IRtranslator v1.0
 * -----------------
 *  Written by MattC.
 *  https://github.com/mattcuk/IRtranslator
 *  Arduino IR Translator. Converts incoming IR codes from one manufacturer to another set of IR codes from a different manufacturer.
 */

// #include <IRremote.h> // >v3.0.0
                                           
// #define PIN_RECV 0
// #define PIN_SEND 3

// void setup()  
// {  
//   Serial.begin(115200); //initialize serial connection to print on the Serial Monitor of the Arduino IDE

//   Serial.print("Initialise IrSender on PIN ");
//   Serial.println(PIN_SEND);
//   IrSender.begin(PIN_SEND, false); // Initialise the IR sender

//   // Uncomment this block if you want this to happen during boot-up
//   // Send POWER ON to speaker IR as the board boots up (power applied from the TV's USB port)
//   /*delay(10000); // 10 second delay when powering up.. helped fix a problem where the Samsung TV powered the USB port momentarily after 2+ hours :/
//   Serial.println("Sending alternative POWER command (first boot when TV's USB port activated)");
//   // Raw data for Edifier R1850DB/R1855DB power button
//   unsigned int rawData[] = { 8980,4420, 580,520, 580,520, 580,570, 580,520, 630,1620, 580,520, 580,520, 630,520, 580,1620, 630,1620, 630,1620, 580,520, 580,520, 580,1670, 580,1620, 630,1620, 630,470, 630,1620, 630,1570, 630,520, 580,520, 630,520, 580,1620, 630,520, 580,1670, 580,470, 630,520, 580,1620, 630,1620, 630,1620, 630,470, 630,1620, 580 };
//   IrSender.sendRaw(rawData, sizeof(rawData)/sizeof(int), 38);
//   delay(5); // Make sure data got sent */

//   Serial.print("Initialise IrReceiver on PIN ");
//   Serial.println(PIN_RECV);
//   IrReceiver.begin(PIN_RECV, true); // Initializes the IR receiver
// }  

// int sendDelay = 5; // Can be adjusted (increased from 5) if you have issues with the spacing of IR transmits & your equipment seeing multiple sends as one long code
// int justBooted = true; // Set to false if you don't want special behaviour on the first button press after booting (see line 57 onwards)

// // Command sequence matching (look for a pattern & do something special)
// int seqLen = 4; // Need to know the sequence length
// char seqMatch[] = { 'M', 'M', 'M', 'U' }; // Sequence we're looking for
// char seqCurrent[4]; // Current sequence

// void loop()  
// {
//   if (IrReceiver.decode()) {
//     IrReceiver.printIRResultShort(&Serial); // Prints a summary of the received data

//     // Output the raw data (helps learn your particular remote)
//     IrReceiver.compensateAndPrintIRResultAsCArray(&Serial, true); // Output the results as uint16_t source code array of micros

//     // Amazon Basics Soundbar Commands/Buttons (this will vary depending on what manufacturer you choose to map into your Fire TV remote)
//     if (IrReceiver.decodedIRData.address == 0) {

//         delay(5); // Seems to need 5ms to cool-down from recieving an IR signal
//         char currCommand = 'X';

//         if (justBooted) {
          
//           // This can be used to power on your speakers when one of the remote buttons is pressed for the first time after booting the Arduino
//           // It's useful when the POWER ON block is causing you issues in setup(). To disable this behaviour simply set the justBooted variable to false on line 36.
//           justBooted = false;
//           Serial.println("Sending alternative POWER command (first booted)");
//           // Raw data for Edifier R1850DB/R1855DB power button
//           unsigned int rawData[] = { 8980,4420, 580,520, 580,520, 580,570, 580,520, 630,1620, 580,520, 580,520, 630,520, 580,1620, 630,1620, 630,1620, 580,520, 580,520, 580,1670, 580,1620, 630,1620, 630,470, 630,1620, 630,1570, 630,520, 580,520, 630,520, 580,1620, 630,520, 580,1670, 580,470, 630,520, 580,1620, 630,1620, 630,1620, 630,470, 630,1620, 580 };
//           IrSender.sendRaw(rawData, sizeof(rawData)/sizeof(int), 38);
//           delay(sendDelay); // Make sure data got sent */
          
//         } else {

//           // Look for the buttons we want mapped from the Fire TV remote to the Edifier speakers
//           if (IrReceiver.decodedIRData.command == 0x40) {
//               Serial.println("Received POWER .. sending alternative command");
//               // Raw data for Edifier R1850DB/R1855DB power button
//               unsigned int rawData[] = { 8980,4420, 580,520, 580,520, 580,570, 580,520, 630,1620, 580,520, 580,520, 630,520, 580,1620, 630,1620, 630,1620, 580,520, 580,520, 580,1670, 580,1620, 630,1620, 630,470, 630,1620, 630,1570, 630,520, 580,520, 630,520, 580,1620, 630,520, 580,1670, 580,470, 630,520, 580,1620, 630,1620, 630,1620, 630,470, 630,1620, 580 };
//               IrSender.sendRaw(rawData, sizeof(rawData)/sizeof(int), 38);
//               currCommand = 'P';
//               delay(40000); // 40 sec delay so that power doesn't accidently get toggled (the TVs USB power should auto off after 20 sec.. powering this all down)
//           } else if (IrReceiver.decodedIRData.command == 0x41) {
//               Serial.println("Received VOL Up .. sending alternative command");
//               // Raw data for Edifier R1850DB/R1855DB volume up
//               unsigned int rawData[] = { 8880,4520, 530,570, 530,570, 580,570, 530,570, 580,1670, 530,570, 530,570, 580,570, 530,1670, 580,1670, 530,1670, 580,570, 530,570, 530,1720, 530,1670, 580,1670, 530,570, 580,1670, 530,1670, 580,570, 530,570, 530,620, 530,570, 580,520, 580,1670, 530,570, 580,570, 530,1670, 580,1670, 530,1670, 580,1670, 530,1670, 580 };
//               IrSender.sendRaw(rawData, sizeof(rawData)/sizeof(int), 38);
//               currCommand = 'U';
//               delay(sendDelay);
//           } else if (IrReceiver.decodedIRData.command == 0x45) {
//               Serial.println("Received VOL Down .. sending alternative command");
//               // Raw data for Edifier R1850DB/R1855DB volume down
//               unsigned int rawData[] = { 8930,4420, 580,570, 580,520, 580,520, 580,570, 580,1620, 580,570, 580,520, 580,520, 580,1670, 580,1620, 630,1620, 580,520, 580,570, 580,1620, 580,1670, 580,1670, 580,1620, 580,1670, 580,1620, 580,570, 530,620, 530,520, 630,1620, 580,520, 580,570, 580,520, 580,570, 580,1620, 580,1670, 580,1620, 580,570, 580,1620, 580 };
//               IrSender.sendRaw(rawData, sizeof(rawData)/sizeof(int), 38);
//               currCommand = 'D';
//               delay(sendDelay);
//           } else if (IrReceiver.decodedIRData.command == 0x48) {
//               Serial.println("Received VOL Mute .. sending alternative command");
//               // Raw data for Edifier R1850DB/R1855DB mute button
//               unsigned int rawData[] = { 8930,4470, 580,520, 580,520, 630,520, 580,520, 580,1670, 580,520, 580,570, 580,520, 580,1620, 580,1670, 580,1670, 580,520, 580,520, 580,1670, 580,1670, 580,1620, 580,1670, 580,520, 580,520, 630,520, 580,520, 630,470, 630,1620, 580,520, 630,520, 580,1620, 580,1670, 580,1670, 580,1620, 580,1670, 580,520, 580,1670, 580 };
//               IrSender.sendRaw(rawData, sizeof(rawData)/sizeof(int), 38);
//               currCommand = 'M';
//               delay(sendDelay);
//           }
          
//         }

//         // Look for a sequence of remote commands (like a Konami code) to send a POWER command (helpful if speaker power gets out of sync)
//         arrayPush(seqCurrent, currCommand, seqLen);
//         Serial.print("Current sequence = ");
//         arrayPrint(seqCurrent, seqLen);
  
//         if (isArrayMatch(seqCurrent, seqMatch, seqLen)) {
//           Serial.println("Sequence recognised.. sending alternative POWER command");

//           arrayPush(seqCurrent, ' ', seqLen); // Reset the sequence
          
//           // Raw data for Edifier R1850DB/R1855DB power button
//           delay(100);
//           unsigned int rawData[] = { 8980,4420, 580,520, 580,520, 580,570, 580,520, 630,1620, 580,520, 580,520, 630,520, 580,1620, 630,1620, 630,1620, 580,520, 580,520, 580,1670, 580,1620, 630,1620, 630,470, 630,1620, 630,1570, 630,520, 580,520, 630,520, 580,1620, 630,520, 580,1670, 580,470, 630,520, 580,1620, 630,1620, 630,1620, 630,470, 630,1620, 580 };
//           IrSender.sendRaw(rawData, sizeof(rawData)/sizeof(int), 38);
//           delay(50);
//         }
//     }
    
//     Serial.println("---------------------------------------------------------------------------------------");
//     Serial.flush();
//     IrReceiver.resume(); // Receive the next IR signal
//   }
// }

// // Do the arrays match?
// bool isArrayMatch(char arr1[], char arr2[], int len) {
//   bool isMatch = true;
//   for(int i=0; i<len; i++) {
//     if(arr1[i]!=arr2[i]) {
//       isMatch = false;
//       break;
//     }
//   }
//   return isMatch;
// }

// // Push a value to the end of the array by shifting all current values to the left
// void arrayPush(char arr[], char val, int len) {
//   for(int i=1; i<len; i++) {
//     arr[i-1]=arr[i];
//   }
//   arr[len-1]=val;
// }

// // Print the array contents to Serial (helps with debugging)
// void arrayPrint(char arr[], int len) {
//   for(int i=0; i<len; i++) {
//     Serial.print(arr[i]);
//     Serial.print(" ");
//   }
//   Serial.println();
// }







// /*
//  * SimpleReceiver.cpp
//  *
//  * Demonstrates receiving ONLY NEC protocol IR codes with IRremote
//  * If no protocol is defined, all protocols (except Bang&Olufsen) are active.
//  *
//  *  This file is part of Arduino-IRremote https://github.com/Arduino-IRremote/Arduino-IRremote.
//  *
//  ************************************************************************************
//  * MIT License
//  *
//  * Copyright (c) 2020-2023 Armin Joachimsmeyer
//  *
//  * Permission is hereby granted, free of charge, to any person obtaining a copy
//  * of this software and associated documentation files (the "Software"), to deal
//  * in the Software without restriction, including without limitation the rights
//  * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
//  * copies of the Software, and to permit persons to whom the Software is furnished
//  * to do so, subject to the following conditions:
//  *
//  * The above copyright notice and this permission notice shall be included in all
//  * copies or substantial portions of the Software.
//  *
//  * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED,
//  * INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A
//  * PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT
//  * HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF
//  * CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE
//  * OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
//  *
//  ************************************************************************************
//  */

// #include <Arduino.h>

// /*
//  * Specify which protocol(s) should be used for decoding.
//  * If no protocol is defined, all protocols (except Bang&Olufsen) are active.
//  * This must be done before the #include <IRremote.hpp>
//  */
// //#define DECODE_DENON        // Includes Sharp
// //#define DECODE_JVC
// //#define DECODE_KASEIKYO
// //#define DECODE_PANASONIC    // alias for DECODE_KASEIKYO
// //#define DECODE_LG
// #define DECODE_NEC          // Includes Apple and Onkyo. To enable all protocols , just comment/disable this line.
// //#define DECODE_SAMSUNG
// //#define DECODE_SONY
// //#define DECODE_RC5
// //#define DECODE_RC6

// //#define DECODE_BOSEWAVE
// //#define DECODE_LEGO_PF
// //#define DECODE_MAGIQUEST
// //#define DECODE_WHYNTER
// //#define DECODE_FAST

// //#define DECODE_DISTANCE_WIDTH // Universal decoder for pulse distance width protocols
// //#define DECODE_HASH         // special decoder for all protocols

// //#define DECODE_BEO          // This protocol must always be enabled manually, i.e. it is NOT enabled if no protocol is defined. It prevents decoding of SONY!

// //#define DEBUG               // Activate this for lots of lovely debug output from the decoders.

// //#define RAW_BUFFER_LENGTH  750 // For air condition remotes it requires 750. Default is 200.

// /*
//  * This include defines the actual pin number for pins like IR_RECEIVE_PIN, IR_SEND_PIN for many different boards and architectures
//  */
// #include "PinDefinitionsAndMore.h"
// #include <IRremote.hpp> // include the library

// void setup() {
//     Serial.begin(115200);
//     while (!Serial)
//         ; // Wait for Serial to become available. Is optimized away for some cores.

//     // Just to know which program is running on my Arduino
//     Serial.println(F("START " __FILE__ " from " __DATE__ "\r\nUsing library version " VERSION_IRREMOTE));

//     // Start the receiver and if not 3. parameter specified, take LED_BUILTIN pin from the internal boards definition as default feedback LED
//     IrReceiver.begin(IR_RECEIVE_PIN, ENABLE_LED_FEEDBACK);

//     Serial.print(F("Ready to receive IR signals of protocols: "));
//     printActiveIRProtocols(&Serial);
//     Serial.println(F("at pin " STR(IR_RECEIVE_PIN)));
// }

// void loop() {
//     /*
//      * Check if received data is available and if yes, try to decode it.
//      * Decoded result is in the IrReceiver.decodedIRData structure.
//      *
//      * E.g. command is in IrReceiver.decodedIRData.command
//      * address is in command is in IrReceiver.decodedIRData.address
//      * and up to 32 bit raw data in IrReceiver.decodedIRData.decodedRawData
//      */
//     if (IrReceiver.decode()) {

//         /*
//          * Print a summary of received data
//          */
//         if (IrReceiver.decodedIRData.protocol == UNKNOWN) {
//             Serial.println(F("Received noise or an unknown (or not yet enabled) protocol"));
//             // We have an unknown protocol here, print extended info
//             IrReceiver.printIRResultRawFormatted(&Serial, true);
//             IrReceiver.resume(); // Do it here, to preserve raw data for printing with printIRResultRawFormatted()
//         } else {
//             IrReceiver.resume(); // Early enable receiving of the next IR frame
//             IrReceiver.printIRResultShort(&Serial);
//             IrReceiver.printIRSendUsage(&Serial);
//         }
//         Serial.println();

//         /*
//          * Finally, check the received data and perform actions according to the received command
//          */
//         if (IrReceiver.decodedIRData.command == 0x10) {
//             // do something
//         } else if (IrReceiver.decodedIRData.command == 0x11) {
//             // do something else
//         }
//     }
// }




















/*
 * ReceiveDemo.cpp
 *
 * Demonstrates receiving IR codes with the IRremote library and the use of the Arduino tone() function with this library.
 * Long press of one IR button (receiving of multiple repeats for one command) is detected.
 * If debug button is pressed (pin connected to ground) a long output is generated, which may disturb detecting of repeats.
 *
 *  This file is part of Arduino-IRremote https://github.com/Arduino-IRremote/Arduino-IRremote.
 *
 ************************************************************************************
 * MIT License
 *
 * Copyright (c) 2020-2024 Armin Joachimsmeyer
 *
 * Permission is hereby granted, free of charge, to any person obtaining a copy
 * of this software and associated documentation files (the "Software"), to deal
 * in the Software without restriction, including without limitation the rights
 * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
 * copies of the Software, and to permit persons to whom the Software is furnished
 * to do so, subject to the following conditions:
 *
 * The above copyright notice and this permission notice shall be included in all
 * copies or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED,
 * INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A
 * PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT
 * HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF
 * CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE
 * OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
 *
 ************************************************************************************
 */

#include <Arduino.h>

#include "PinDefinitionsAndMore.h" // Define macros for input and output pin etc.

//#define LOCAL_DEBUG // If defined, print timing for each received data set (the same as if DEBUG_BUTTON_PIN was connected to low)

/*
 * Specify which protocol(s) should be used for decoding.
 * If no protocol is defined, all protocols (except Bang&Olufsen) are active.
 * This must be done before the #include <IRremote.hpp>
 */
//#define DECODE_DENON        // Includes Sharp
//#define DECODE_JVC
//#define DECODE_KASEIKYO
//#define DECODE_PANASONIC    // alias for DECODE_KASEIKYO
//#define DECODE_LG
//#define DECODE_ONKYO        // Decodes only Onkyo and not NEC or Apple
//#define DECODE_NEC          // Includes Apple and Onkyo
//#define DECODE_SAMSUNG
//#define DECODE_SONY
//#define DECODE_RC5
//#define DECODE_RC6
//#define DECODE_BOSEWAVE
//#define DECODE_LEGO_PF
//#define DECODE_MAGIQUEST
//#define DECODE_WHYNTER
//#define DECODE_FAST
//#define DECODE_DISTANCE_WIDTH // Universal decoder for pulse distance width protocols
//#define DECODE_HASH         // special decoder for all protocols
//#define DECODE_BEO          // This protocol must always be enabled manually, i.e. it is NOT enabled if no protocol is defined. It prevents decoding of SONY!
#if FLASHEND >= 0x3FFF  // For 16k flash or more, like ATtiny1604. Code does not fit in program memory of ATtiny85 etc.
// !!! Enabling B&O disables detection of Sony, because the repeat gap for SONY is smaller than the B&O frame gap :-( !!!
//#define DECODE_BEO // Bang & Olufsen protocol always must be enabled explicitly. It has an IR transmit frequency of 455 kHz! It prevents decoding of SONY!
#endif
#if defined(DECODE_BEO)
#define RECORD_GAP_MICROS 16000 // always get the complete frame in the receive buffer, but this prevents decoding of SONY!
#endif
// etc. see IRremote.hpp
//

#if !defined(RAW_BUFFER_LENGTH)
// For air condition remotes it requires 750. Default is 200.
#  if !((defined(RAMEND) && RAMEND <= 0x4FF) || (defined(RAMSIZE) && RAMSIZE < 0x4FF))
#define RAW_BUFFER_LENGTH  750
#  endif
#endif

//#define NO_LED_FEEDBACK_CODE // saves 92 bytes program memory
//#define EXCLUDE_UNIVERSAL_PROTOCOLS // Saves up to 1000 bytes program memory.
//#define EXCLUDE_EXOTIC_PROTOCOLS // saves around 650 bytes program memory if all other protocols are active
//#define IR_REMOTE_DISABLE_RECEIVE_COMPLETE_CALLBACK // saves 32 bytes program memory

// MARK_EXCESS_MICROS is subtracted from all marks and added to all spaces before decoding,
// to compensate for the signal forming of different IR receiver modules. See also IRremote.hpp line 142.
//#define MARK_EXCESS_MICROS    20    // Adapt it to your IR receiver module. 40 is taken for the cheap VS1838 module her, since we have high intensity.

//#define RECORD_GAP_MICROS 12000 // Default is 8000. Activate it for some LG air conditioner protocols

//#define DEBUG // Activate this for lots of lovely debug output from the decoders.

#include <IRremote.hpp>

#if defined(APPLICATION_PIN)
#define DEBUG_BUTTON_PIN    APPLICATION_PIN // if low, print timing for each received data set
#else
#define DEBUG_BUTTON_PIN   6
#endif

void generateTone();
void handleOverflow();
bool detectLongPress(uint16_t aLongPressDurationMillis);

void setup() {
#if FLASHEND >= 0x3FFF  // For 16k flash or more, like ATtiny1604. Code does not fit in program memory of ATtiny85 etc.
    pinMode(DEBUG_BUTTON_PIN, INPUT_PULLUP);
#endif

    Serial.begin(115200);
    while (!Serial)
        ; // Wait for Serial to become available. Is optimized away for some cores.

#if defined(__AVR_ATmega32U4__) || defined(SERIAL_PORT_USBVIRTUAL) || defined(SERIAL_USB) /*stm32duino*/|| defined(USBCON) /*STM32_stm32*/ \
    || defined(SERIALUSB_PID)  || defined(ARDUINO_ARCH_RP2040) || defined(ARDUINO_attiny3217)
    delay(4000); // To be able to connect Serial monitor after reset or power up and before first print out. Do not wait for an attached Serial Monitor!
#endif
// Just to know which program is running on my Arduino
    Serial.println(F("START " __FILE__ " from " __DATE__ "\r\nUsing library version " VERSION_IRREMOTE));

// In case the interrupt driver crashes on setup, give a clue
// to the user what's going on.
    Serial.println(F("Enabling IRin..."));

    // Start the receiver and if not 3. parameter specified, take LED_BUILTIN pin from the internal boards definition as default feedback LED
    IrReceiver.begin(IR_RECEIVE_PIN, ENABLE_LED_FEEDBACK);

    Serial.print(F("Ready to receive IR signals of protocols: "));
    printActiveIRProtocols(&Serial);
#if defined(IR_RECEIVE_PIN_STRING)
    Serial.println(F("at pin " IR_RECEIVE_PIN_STRING));
#else
    Serial.println(F("at pin " STR(IR_RECEIVE_PIN)));
#endif

#if FLASHEND >= 0x3FFF  // For 16k flash or more, like ATtiny1604. Code does not fit in program memory of ATtiny85 etc.
    Serial.println();
    if (digitalRead(DEBUG_BUTTON_PIN) != LOW) {
        Serial.print(F("If you connect debug pin "));
#  if defined(APPLICATION_PIN_STRING)
        Serial.print(APPLICATION_PIN_STRING);
#  else
        Serial.print(DEBUG_BUTTON_PIN);
#  endif
        Serial.print(F(" to ground, "));
    }
    Serial.println(F("raw data is always printed"));

    // infos for receive
    Serial.print(RECORD_GAP_MICROS);
    Serial.println(F(" us is the (minimum) gap, after which the start of a new IR packet is assumed"));
    Serial.print(MARK_EXCESS_MICROS);
    Serial.println(F(" us are subtracted from all marks and added to all spaces for decoding"));
#endif
}

void loop() {
    /*
     * Check if received data is available and if yes, try to decode it.
     * Decoded result is in the IrReceiver.decodedIRData structure.
     *
     * E.g. command is in IrReceiver.decodedIRData.command
     * address is in command is in IrReceiver.decodedIRData.address
     * and up to 32 bit raw data in IrReceiver.decodedIRData.decodedRawData
     */
    if (IrReceiver.decode()) {
        Serial.println();
#if FLASHEND < 0x3FFF  //
        // For less than 16k flash, only print a minimal summary of received data
        IrReceiver.printIRResultMinimal(&Serial);
#else

        /*
         *
         */
        if (IrReceiver.decodedIRData.flags & IRDATA_FLAGS_WAS_OVERFLOW) {
            handleOverflow();
        } else {
            /*
             * No overflow here.
             * Stop receiver, generate a single beep, print short info and send usage and start receiver again
             *****************************************************************************************************/

            if ((IrReceiver.decodedIRData.protocol != SONY) && (IrReceiver.decodedIRData.protocol != PULSE_WIDTH)
                    && (IrReceiver.decodedIRData.protocol != PULSE_DISTANCE) && (IrReceiver.decodedIRData.protocol != UNKNOWN)
                    && digitalRead(DEBUG_BUTTON_PIN) != LOW) {
                /*
                 * For SONY the tone prevents the detection of a repeat after the 15 ms SONY gap.
                 * In debug mode and for unknown protocols, we need the time for extended output.
                 * Skipping tone will get exact gap time between transmissions and not running into repeat frames while wait for tone to end.
                 * This in turn enables the next CheckForRecordGapsMicros() call a chance to eventually propose a change of the current RECORD_GAP_MICROS value.
                 */
                generateTone();
            }

            /*
             * Print info
             */
            if (IrReceiver.decodedIRData.protocol == UNKNOWN || digitalRead(DEBUG_BUTTON_PIN) == LOW) {
                // We have debug enabled or an unknown protocol, print extended info
                if (IrReceiver.decodedIRData.protocol == UNKNOWN) {
                    Serial.println(F("Received noise or an unknown (or not yet enabled) protocol"));
                }
                IrReceiver.printIRResultRawFormatted(&Serial, true);
            }
            if (IrReceiver.decodedIRData.protocol != UNKNOWN) {
                /*
                 * The info output for a successful receive
                 */
                IrReceiver.printIRResultShort(&Serial);
                IrReceiver.printIRSendUsage(&Serial);
            }
        }
#endif // #if FLASHEND >= 0x3FFF

        /*
         * !!!Important!!! Enable receiving of the next value, because receiving
         * has stopped after the end of the current received data packet.
         * Do it here, to preserve raw data for printing with printIRResultRawFormatted()
         */
        IrReceiver.resume();

        /*
         * Finally check the received data and perform actions according to the received address and commands
         */
        if (IrReceiver.decodedIRData.address == 0) {
            if (IrReceiver.decodedIRData.command == 0x10) {
                // do something
            } else if (IrReceiver.decodedIRData.command == 0x11) {
                // do something else
            }
        }

        // Check if repeats of the IR command was sent for more than 1000 ms
        if (detectLongPress(1000)) {
            Serial.print(F("Command 0x"));
            Serial.print(IrReceiver.decodedIRData.command, HEX);
            Serial.println(F(" was repeated for more than 2 seconds"));
        }
    } // if (IrReceiver.decode())

    /*
     * Your code here
     * For all users of the FastLed library, use this code for strip.show() to improve receiving performance (which is still not 100%):
     * if (IrReceiver.isIdle()) {
     *     strip.show();
     * }
     */

}

/*
 * Stop receiver, generate a single beep and start receiver again
 */
void generateTone() {
#if !defined(ESP8266) && !defined(NRF5) // tone on esp8266 works only once, then it disables IrReceiver.restartTimer() / timerConfigForReceive().
#  if defined(ESP32) // ESP32 uses another timer for tone()
    tone(TONE_PIN, 2200, 8);
#  else
    IrReceiver.stopTimer(); // ESP32 uses another timer for tone(), maybe other platforms (not tested yet) too.
    tone(TONE_PIN, 2200, 8);
    delay(8);
    IrReceiver.restartTimer(8000); // Restart IR timer. 8000 to compensate for 8 ms stop of receiver. This enables a correct gap measurement.
#  endif
#endif
}

void handleOverflow() {
    Serial.println(F("Overflow detected"));
    Serial.println(F("Try to increase the \"RAW_BUFFER_LENGTH\" value of " STR(RAW_BUFFER_LENGTH) " in " __FILE__));
    // see also https://github.com/Arduino-IRremote/Arduino-IRremote#compile-options--macros-for-this-library

#if !defined(ESP8266) && !defined(NRF5) // tone on esp8266 works once, then it disables IrReceiver.restartTimer() / timerConfigForReceive().
    /*
     * Stop timer, generate a double beep and start timer again
     */
#  if defined(ESP32) // ESP32 uses another timer for tone()
    tone(TONE_PIN, 1100, 10);
    delay(50);
    tone(TONE_PIN, 1100, 10);
#  else
    IrReceiver.stopTimer();
    tone(TONE_PIN, 1100, 10);
    delay(50);
    tone(TONE_PIN, 1100, 10);
    delay(50);
    IrReceiver.restartTimer(100000); // to compensate for 100 ms stop of receiver. This enables a correct gap measurement.
#  endif
#endif
}

unsigned long sMillisOfFirstReceive;
bool sLongPressJustDetected;
/**
 * True once we received the consecutive repeats for more than aLongPressDurationMillis milliseconds.
 * The first frame, which is no repeat, is NOT counted for the duration!
 * @return true once after the repeated IR command was received for longer than aLongPressDurationMillis milliseconds, false otherwise.
 */
bool detectLongPress(uint16_t aLongPressDurationMillis) {
    if (!sLongPressJustDetected && (IrReceiver.decodedIRData.flags & IRDATA_FLAGS_IS_REPEAT)) {
        /*
         * Here the repeat flag is set (which implies, that command is the same as the previous one)
         */
        if (millis() - aLongPressDurationMillis > sMillisOfFirstReceive) {
            sLongPressJustDetected = true; // Long press here
        }
    } else {
        // No repeat here
        sMillisOfFirstReceive = millis();
        sLongPressJustDetected = false;
    }
    return sLongPressJustDetected; // No long press here
}
