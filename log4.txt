START C:\Users\mhlee\Desktop\AnalogReadSerial\AnalogReadSerial.ino from Jul 14 2024
Using library version 4.4.0
Ready to receive IR signals of protocols: NEC/NEC2/Onkyo/Apple, Panasonic/Kaseikyo, Denon/Sharp, Sony, RC5, RC6, LG, JVC, Samsung, FAST, Whynter, Lego Power Functions, Bosewave, MagiQuest, Universal Pulse Distance Width, Hash at pin 2
8000 us is the (minimum) gap, after which the start of a new IR packet is assumed
20
Because of the verbose output (>200 ms at 115200 baud), repeats are not dumped correctly!

If you receive protocol NEC, Samsung or LG, run also ReceiveDemo to check if your actual protocol is eventually NEC2 or SamsungLG, which is determined by the repeats



Protocol=PulseDistance Raw-Data=0x9B12 112 bits LSB first

Send on a 8 bit platform with: 
    uint32_t tRawData[]={0x126CB23, 0x32400, 0x4D, 0x9B12};
    IrSender.sendPulseDistanceWidthFromArray(38, 3250, 1750, 300, 1300, 300, 500, &tRawData[0], 112, PROTOCOL_IS_LSB_FIRST, <RepeatPeriodMillis>, <numberOfRepeats>);

Raw result in internal ticks (50 us) - with leading gap
rawData[228]: 
 -65535
 +65,-35
 + 8,-25 + 7,-25 + 7,- 9 + 7,-10
 + 7,-10 + 7,-25 + 7,-10 + 7,-10
 + 6,-26 + 6,-26 + 6,-10 + 7,-25
 + 7,-10 + 7,-10 + 7,-25 + 7,-25
 + 7,-10 + 6,-26 + 6,-26 + 6,-11
 + 6,-11 + 6,-25 + 7,-10 + 7,-10
 + 6,-26 + 6,-11 + 6,-11 + 6,-10
 + 7,-10 + 6,-11 + 6,-11 + 6,-10
 + 7,-10 + 7,-10 + 6,-11 + 6,-11
 + 6,-10 + 7,-10 + 6,-11 + 6,-11
 + 6,-10 + 7,-10 + 7,-25 + 7,-10
 + 6,-11 + 6,-26 + 6,-10 + 7,-10
 + 7,-25 + 7,-25 + 7,-10 + 6,-11
 + 6,-11 + 6,-10 + 7,-10 + 6,-11
 + 6,-11 + 6,-10 + 7,-10 + 6,-11
 + 6,-11 + 6,-10 + 7,-10 + 7,-10
 + 6,-26 + 6,-11 + 6,-26 + 6,-26
 + 6,-11 + 6,-10 + 7,-25 + 7,-10
 + 6,-11 + 6,-11 + 6,-10 + 7,-10
 + 6,-11 + 6,-11 + 6,-10 + 7,-10
 + 7,-10 + 6,-11 + 6,-11 + 6,-10
 + 7,-10 + 6,-11 + 6,-11 + 6,-10
 + 7,-10 + 6,-11 + 6,-11 + 6,-10
 + 7,-10 + 7,-10 + 6,-11 + 6,-11
 + 6,-10 + 7,-25 + 7,-10 + 6,-11
 + 6,-26 + 6,-11 + 6,-10 + 7,-10
 + 6,-26 + 6,-26 + 6,-11 + 6,-26
 + 6,-26 + 6,-11 + 6,-10 + 7,-25
 + 7
Sum: 2397
Raw result in microseconds - with leading gap
rawData[228]: 
 -3276750
 +3250,-1750
 + 400,-1250 + 350,-1250 + 350,- 450 + 350,- 500
 + 350,- 500 + 350,-1250 + 350,- 500 + 350,- 500
 + 300,-1300 + 300,-1300 + 300,- 500 + 350,-1250
 + 350,- 500 + 350,- 500 + 350,-1250 + 350,-1250
 + 350,- 500 + 300,-1300 + 300,-1300 + 300,- 550
 + 300,- 550 + 300,-1250 + 350,- 500 + 350,- 500
 + 300,-1300 + 300,- 550 + 300,- 550 + 300,- 500
 + 350,- 500 + 300,- 550 + 300,- 550 + 300,- 500
 + 350,- 500 + 350,- 500 + 300,- 550 + 300,- 550
 + 300,- 500 + 350,- 500 + 300,- 550 + 300,- 550
 + 300,- 500 + 350,- 500 + 350,-1250 + 350,- 500
 + 300,- 550 + 300,-1300 + 300,- 500 + 350,- 500
 + 350,-1250 + 350,-1250 + 350,- 500 + 300,- 550
 + 300,- 550 + 300,- 500 + 350,- 500 + 300,- 550
 + 300,- 550 + 300,- 500 + 350,- 500 + 300,- 550
 + 300,- 550 + 300,- 500 + 350,- 500 + 350,- 500
 + 300,-1300 + 300,- 550 + 300,-1300 + 300,-1300
 + 300,- 550 + 300,- 500 + 350,-1250 + 350,- 500
 + 300,- 550 + 300,- 550 + 300,- 500 + 350,- 500
 + 300,- 550 + 300,- 550 + 300,- 500 + 350,- 500
 + 350,- 500 + 300,- 550 + 300,- 550 + 300,- 500
 + 350,- 500 + 300,- 550 + 300,- 550 + 300,- 500
 + 350,- 500 + 300,- 550 + 300,- 550 + 300,- 500
 + 350,- 500 + 350,- 500 + 300,- 550 + 300,- 550
 + 300,- 500 + 350,-1250 + 350,- 500 + 300,- 550
 + 300,-1300 + 300,- 550 + 300,- 500 + 350,- 500
 + 300,-1300 + 300,-1300 + 300,- 550 + 300,-1300
 + 300,-1300 + 300,- 550 + 300,- 500 + 350,-1250
 + 350
Sum: 119850

Result as internal 8bit ticks (50 us) array - compensated with MARK_EXCESS_MICROS=20
uint8_t rawTicks[227] = {65,35, 8,25, 7,25, 7,9, 7,10, 7,10, 7,25, 7,10, 7,10, 6,26, 6,26, 6,10, 7,25, 7,10, 7,10, 7,25, 7,25, 7,10, 6,26, 6,26, 6,11, 6,11, 6,25, 7,10, 7,10, 6,26, 6,11, 6,11, 6,10, 7,10, 6,11, 6,11, 6,10, 7,10, 7,10, 6,11, 6,11, 6,10, 7,10, 6,11, 6,11, 6,10, 7,10, 7,25, 7,10, 6,11, 6,26, 6,10, 7,10, 7,25, 7,25, 7,10, 6,11, 6,11, 6,10, 7,10, 6,11, 6,11, 6,10, 7,10, 6,11, 6,11, 6,10, 7,10, 7,10, 6,26, 6,11, 6,26, 6,26, 6,11, 6,10, 7,25, 7,10, 6,11, 6,11, 6,10, 7,10, 6,11, 6,11, 6,10, 7,10, 7,10, 6,11, 6,11, 6,10, 7,10, 6,11, 6,11, 6,10, 7,10, 6,11, 6,11, 6,10, 7,10, 7,10, 6,11, 6,11, 6,10, 7,25, 7,10, 6,11, 6,26, 6,11, 6,10, 7,10, 6,26, 6,26, 6,11, 6,26, 6,26, 6,11, 6,10, 7,25, 7};  // Protocol=PulseDistance Raw-Data=0x9B12 112 bits LSB first

Result as microseconds array - compensated with MARK_EXCESS_MICROS=20
uint16_t rawData[227] = {3230,1770, 380,1270, 330,1270, 330,470, 330,520, 330,520, 330,1270, 330,520, 330,520, 280,1320, 280,1320, 280,520, 330,1270, 330,520, 330,520, 330,1270, 330,1270, 330,520, 280,1320, 280,1320, 280,570, 280,570, 280,1270, 330,520, 330,520, 280,1320, 280,570, 280,570, 280,520, 330,520, 280,570, 280,570, 280,520, 330,520, 330,520, 280,570, 280,570, 280,520, 330,520, 280,570, 280,570, 280,520, 330,520, 330,1270, 330,520, 280,570, 280,1320, 280,520, 330,520, 330,1270, 330,1270, 330,520, 280,570, 280,570, 280,520, 330,520, 280,570, 280,570, 280,520, 330,520, 280,570, 280,570, 280,520, 330,520, 330,520, 280,1320, 280,570, 280,1320, 280,1320, 280,570, 280,520, 330,1270, 330,520, 280,570, 280,570, 280,520, 330,520, 280,570, 280,570, 280,520, 330,520, 330,520, 280,570, 280,570, 280,520, 330,520, 280,570, 280,570, 280,520, 330,520, 280,570, 280,570, 280,520, 330,520, 330,520, 280,570, 280,570, 280,520, 330,1270, 330,520, 280,570, 280,1320, 280,570, 280,520, 330,520, 280,1320, 280,1320, 280,570, 280,1320, 280,1320, 280,570, 280,520, 330,1270, 330};  // Protocol=PulseDistance Raw-Data=0x9B12 112 bits LSB first

uint16_t address = 0x0;
uint16_t command = 0x0;
uint32_t rawData = 0x9B12;


Pronto Hex as string
char prontoData[] = "0000 006D 0072 0000 007E 0043 0010 002F 000E 002F 000E 0011 000E 0012 000E 0012 000E 002F 000E 0012 000E 0012 000C 0031 000C 0031 000C 0012 000E 002F 000E 0012 000E 0012 000E 002F 000E 002F 000E 0012 000C 0031 000C 0031 000C 0014 000C 0014 000C 002F 000E 0012 000E 0012 000C 0031 000C 0014 000C 0014 000C 0012 000E 0012 000C 0014 000C 0014 000C 0012 000E 0012 000E 0012 000C 0014 000C 0014 000C 0012 000E 0012 000C 0014 000C 0014 000C 0012 000E 0012 000E 002F 000E 0012 000C 0014 000C 0031 000C 0012 000E 0012 000E 002F 000E 002F 000E 0012 000C 0014 000C 0014 000C 0012 000E 0012 000C 0014 000C 0014 000C 0012 000E 0012 000C 0014 000C 0014 000C 0012 000E 0012 000E 0012 000C 0031 000C 0014 000C 0031 000C 0031 000C 0014 000C 0012 000E 002F 000E 0012 000C 0014 000C 0014 000C 0012 000E 0012 000C 0014 000C 0014 000C 0012 000E 0012 000E 0012 000C 0014 000C 0014 000C 0012 000E 0012 000C 0014 000C 0014 000C 0012 000E 0012 000C 0014 000C 0014 000C 0012 000E 0012 000E 0012 000C 0014 000C 0014 000C 0012 000E 002F 000E 0012 000C 0014 000C 0031 000C 0014 000C 0012 000E 0012 000C 0031 000C 0031 000C 0014 000C 0031 000C 0031 000C 0014 000C 0012 000E 002F 000E 06C3 ";
